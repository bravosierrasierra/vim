#!/bin/bash

# export LANG=ru_RU.UTF-8
# export LC_ALL=ru_RU.UTF-8

### Emacs stuff ###
# use ~/bin/ec instead this
# alias ec='emacsclient -c --no-wait'
# export EDITOR=~/bin/ec
# export PATH="$HOME/bin:$PATH"
# alias ekill="killall -USR2 Emacs"

# alias dfl="df -h -x tmpfs"
alias mydf='df -lh|grep -ve "/run\|overlay\|shm\|tmpfs"'
alias reconfig="source ~/.bash_profile"

alias gosomehost="reset && ssh someuser@some.host"
# alias getmail="rsync -avz -e ssh stalker@10.98.1.1:Maildir ~/ && mu index"
# alias ideakey="/Users/stalker/bin/idea/IntelliJIDEALicenseServer\(0.0.0.0_41017\)/IntelliJIDEALicenseServer_darwin_amd64"
# alias homeproxy="ssh -fCqN -L 8888:127.0.0.1:8888 workbravo"

### Unix stuff
mypsprogsize() {
    ps auxww|grep $@|awk '{sum += $6} END {print sum}'
}
alias psprogsize='echo "print sum all resident size specified process name" && mypsprogsize'

### Docker stuff
alias dm='/usr/local/bin/docker-machine'
alias dmssh='/usr/local/bin/docker-machine ssh docker-local'
alias dmstart='/usr/local/bin/docker-machine start docker-local'
alias dmstop='/usr/local/bin/docker-machine stop docker-local'
alias dmenv='eval $(/usr/local/bin/docker-machine env docker-local)'
alias dc='/usr/local/bin/docker-compose'
alias dcl='/usr/local/bin/docker-compose logs --tail=100'
alias dcr='/usr/local/bin/docker-compose restart'
alias dce='/usr/local/bin/docker-compose exec'
alias dcb='/usr/local/bin/docker-compose up -d --build'
alias dcrestart='/usr/local/bin/docker-compose down && /usr/local/bin/docker-compose up --build -d'

mydcrebuild() {
    /usr/local/bin/docker-compose build --no-cache $@ && /usr/local/bin/docker-compose restart $@ && /usr/local/bin/docker-compose logs --tail=100 -f $@
}
alias dcrebuild='echo "rebuild and restart specified service. Call logs -f after restart" && mydcrebuild'
alias drc='/usr/local/bin/docker image prune -a --filter "until=24h" --force'
alias dr='/usr/local/bin/docker'
alias drr='/usr/local/bin/docker run --rm'
alias drl='/usr/local/bin/docker logs --tail 100'

# alias pipupgradeall="sudo -H pip2 install -U $(pip2 freeze | awk '{split($0, a, "=="); print a[1]}')"

### K8s stuff
# mykdash() {
#     kubectl -n kube-system get sa dashboard -o yaml|grep "\- name: dash"|awk -F ':' '{print $2}'|xargs kubectl -n kube-system describe secrets
# }
# export KUBECONFIG=~/.kube/admin.conf
# alias kdash='echo "get k8s dashboard token." && mykdash'

### Django & Python stuff ###
#Django: http://virtualenvwrapper.readthedocs.io/en/latest/command_ref.html
export WORKON_HOME=$HOME/.virtualenvs
export VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python2
export VIRTUALENVWRAPPER_VIRTUALENV=/usr/local/bin/virtualenv
export VIRTUALENVWRAPPER_VIRTUALENV_ARGS='--no-site-packages'
if [ -f /usr/local/bin/virtualenvwrapper.sh ]; then
	. /usr/local/bin/virtualenvwrapper.sh
fi
export PIP_VIRTUALENV_BASE=$WORKON_HOME
alias workoff='deactivate'


##################################################
# marks
# http://jeroenjanssens.com/2013/08/16/quickly-navigate-your-filesystem-from-the-command-line.html
# $ cd ~/some/very/deep/often-used/directory

# $ mark deep
# This adds a symbolic link named deep to the directory ~/.marks. To jump to this directory, type the following from any place in the filesystem:

# $ jump deep
# To remove the bookmark (i.e., the symbolic link), type:
# $ unmark deep

# You can view all marks by typing:
# $ marks
# deep    -> /home/johndoe/some/very/deep/often-used/directory
# foo     -> /usr/bin/foo/bar
export MARKPATH=$HOME/.marks
function jump {
    cd -P "$MARKPATH/$1" 2>/dev/null || echo "No such mark: $1"
}
function mark {
    mkdir -p "$MARKPATH"; ln -s "$(pwd)" "$MARKPATH/$1"
}
function unmark {
    rm -i "$MARKPATH/$1"
}

unamestr=`uname`
if [[ "$unamestr" == 'Darwin' ]]; then
    function marks {
        \ls -l "$MARKPATH" | tail -n +2 | sed 's/  / /g' | cut -d' ' -f9- | awk -F ' -> ' '{printf "%-10s -> %s\n", $1, $2}'
    }
else
    function marks {
        ls -l "$MARKPATH" | sed 's/  / /g' | cut -d' ' -f9- | sed 's/ -/\t-/g' && echo
    }
fi

_completemarks() {
    local curw=${COMP_WORDS[COMP_CWORD]}
    # local wordlist=$(find $MARKPATH -type l -printf "%f\n")
    local wordlist=$(ls --color=never -1 $MARKPATH)
    COMPREPLY=($(compgen -W '${wordlist[@]}' -- "$curw"))
    return 0
}

complete -F _completemarks jump unmark
##################################################

